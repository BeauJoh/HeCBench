#===============================================================================
# User Options
#===============================================================================

# Compiler can be set below, or via environment variable
CC        = clang++
OPTIMIZE  = yes
DEBUG     = no
CUDA_ARCH = "--cuda-gpu-arch=sm_70"
GCC_TOOLCHAIN = "/auto/software/gcc/ppc64le/gcc-9.1.0"


#===============================================================================
# Program name & source code list
#===============================================================================

program = main

source = main.cpp shmem_kernels.cpp

obj = main.o shmem_kernels.o

#===============================================================================
# Sets Flags
#===============================================================================

CFLAGS := -DUSE_GPU -std=c++17 -Wall -I../include \
          -fsycl -fsycl-targets=nvptx64-nvidia-cppda-sycldevice \
          -fsycl-unnamed-lambda \
          -Xsycl-target-backend $(CUDA_ARCH) \
          --gcc-toolchain=$(GCC_TOOLCHAIN)


# Linker Flags
LDFLAGS = 

# Debug Flags
ifeq ($(DEBUG),yes)
  CFLAGS += -g
  LDFLAGS  += -g
endif

# Optimization Flags
ifeq ($(OPTIMIZE),yes)
  CFLAGS += -O3
endif

#===============================================================================
# Targets to Build
#===============================================================================

$(program): main.o shmem_kernels.o
	$(CC) $(CFLAGS) $^ -o $@ ${LFLAGS}

main.o: main.cpp shmem_kernels.h
	$(CC) -c $(CFLAGS) $<

shmem_kernels.o: shmem_kernels.cpp
	$(CC) -c $(CFLAGS) $<

clean:
	rm -rf $(program) $(obj)

run: $(program)
	./$(program)


