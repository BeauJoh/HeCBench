          uint idx = item.get_global_id(0);

          if (idx >= nAtom) return;

          POSVECTYPE ipos = position[idx];
          FORCEVECTYPE f = {0.0f, 0.0f, 0.0f, 0.0f};

          int j = 0;
          while (j < maxNeighbors)
          {
              int jidx = neighborList[j*nAtom + idx];

              // Uncoalesced read
              POSVECTYPE jpos = position[jidx];

              // Calculate distance
              FPTYPE delx = ipos.x() - jpos.x();
              FPTYPE dely = ipos.y() - jpos.y();
              FPTYPE delz = ipos.z() - jpos.z();
              FPTYPE r2inv = delx*delx + dely*dely + delz*delz;

              // If distance is less than cutoff, calculate force
              if (r2inv < cutsq_t)
              {
                  r2inv = 1.0f/r2inv;
                  FPTYPE r6inv = r2inv * r2inv * r2inv;
                  FPTYPE forceC = r2inv*r6inv*(lj1_t*r6inv - lj2_t);

                  f.x() += delx * forceC;
                  f.y() += dely * forceC;
                  f.z() += delz * forceC;
              }
              j++;
          }
          // store the results
          force[idx] = f;


