#===============================================================================
# User Options
#===============================================================================

# Compiler can be set below, or via environment variable
CC        = clang++
OPTIMIZE  = yes
DEBUG     = no
CUDA_ARCH = "--cuda-gpu-arch=sm_35"
GCC_TOOLCHAIN = "/auto/software/gcc/x86_64/gcc-9.1.0/"

#===============================================================================
# Program name & source code list
#===============================================================================

program = axhelm

#===============================================================================
# Sets Flags
#===============================================================================

# Standard Flags
CFLAGS :=-DUSE_GPU -std=c++14 -Wall \
         -Ddfloat=float -Ddlong=int  -I../include \
         -fsycl -fsycl-targets=nvptx64-nvidia-cuda-sycldevice \
         -fsycl-unnamed-lambda \
         -Xsycl-target-backend $(CUDA_ARCH) \
         --gcc-toolchain=$(GCC_TOOLCHAIN)

# Linker Flags
LDFLAGS = ./BlasLapack/libBlasLapack.a -lgfortran

# Debug Flags
ifeq ($(DEBUG),yes)
  CFLAGS += -g
  LDFLAGS  += -g
endif


# Optimization Flags
ifeq ($(OPTIMIZE),yes)
  CFLAGS += -O3
endif

#===============================================================================
# Targets to Build
#===============================================================================
all: build

build: $(program)

main.o : main.cpp axhelmReference.cpp
	$(CC) $(CFLAGS) -c $< -o $@
	
meshBasis.o : meshBasis.cpp meshBasis.hpp meshNodesTet3D.h
	$(CC) $(CFLAGS) -c $< -o $@

$(program): main.o meshBasis.o
	$(CC) $(CFLAGS) $+ -o $@ $(LDFLAGS)

clean:
	rm -rf $(program) main.o meshBasis.o

# run one- and three-dimensional kernels
run: $(program)
	./$(program) 1 8000 100
	./$(program) 3 8000 100
