CC        = clang++
OPTIMIZE  = yes
DEBUG     = no
OUTPUT    = no
CUDA_ARCH = "--cuda-gpu-arch=sm_35"
GCC_TOOLCHAIN = "/auto/software/gcc/x86_64/gcc-9.1.0/"


# Standard flags
CFLAGS := -DUSE_GPU -std=c++14 -Wall -I../include \
          -fsycl -fsycl-targets=nvptx64-nvidia-cuda-sycldevice \
          -fsycl-unnamed-lambda \
          -Xsycl-target-backend $(CUDA_ARCH) \
          --gcc-toolchain=$(GCC_TOOLCHAIN)

# Linker flags
LDFLAGS = -lm


ifeq ($(OUTPUT),yes)
  CFLAGS += -DBENCH_PRINT
endif

# Debug Flags
ifeq ($(DEBUG),yes)
  CFLAGS += -g 
endif

# Optimization Flags
ifeq ($(OPTIMIZE),yes)
  CFLAGS += -O3
endif


# link objects(binaries) together
pathfinder: main.o 
	$(CC) $(CFLAGS) $< -o $@ $(LDFLAGS) 

# compile main function file into object (binary)
main.o: main.cpp  kernel.sycl
	$(CC) $(CFLAGS) $< -c -o $@

run: pathfinder
	./pathfinder 100000 500 5

clean:
	@rm -f pathfinder *.o *.out *~ *\#
