    // Use local memory to cache the scanned seeds
    //__local FPTYPE l_scanned_seeds[16];

    // Keep a shared histogram of all instances seen by the current
    // block
    //__local FPTYPE l_block_counts[16];

    // Keep a private histogram as well
    int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume: divisible by 4
    //FPVECTYPE *in4  = (FPVECTYPE*) in;
    //FPVECTYPE *out4 = (FPVECTYPE*) out;

    int n4 = size / 4; //vector type is 4 wide

    int region_size = n4 / item.get_group_range(0);
    int block_start = item.get_group(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (item.get_group(0) == item.get_group_range(0) - 1) ?
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + item.get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (item.get_local_id(0) < 16)
    {
        l_block_counts[item.get_local_id(0)] = 0;
        l_scanned_seeds[item.get_local_id(0)] =
            isums[(item.get_local_id(0)*item.get_group_range(0))+item.get_group(0)];
    }
    item.barrier(access::fence_space::local_space);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        vec<T,4> val_4;
        vec<T,4> key_4;

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4.load(i, in.get_pointer());
            //val_4 = in4[i];

            // Mask the keys to get the appropriate digit
            key_4.x() = (val_4.x() >> shift) & 0xFU;
            key_4.y() = (val_4.y() >> shift) & 0xFU;
            key_4.z() = (val_4.z() >> shift) & 0xFU;
            key_4.w() = (val_4.w() >> shift) & 0xFU;

            // Update the histogram
            histogram[key_4.x()]++;
            histogram[key_4.y()]++;
            histogram[key_4.z()]++;
            histogram[key_4.w()]++;
        }

        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            int idx = item.get_local_id(0);
            lmem[idx] = 0;
            idx += item.get_local_range(0);
            lmem[idx] = histogram[digit];
            item.barrier(access::fence_space::local_space);
            T t;
            for (int i = 1; i < item.get_local_range(0); i *= 2)
            {
                t = lmem[idx -  i]; 
                item.barrier(access::fence_space::local_space);
                lmem[idx] += t;     
                item.barrier(access::fence_space::local_space);
            }
            histogram[digit] = lmem[idx-1];

            //histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            item.barrier(access::fence_space::local_space);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x()] + l_scanned_seeds[key_4.x()] + l_block_counts[key_4.x()];
            out[address] = val_4.x();
            histogram[key_4.x()]++;

            address = histogram[key_4.y()] + l_scanned_seeds[key_4.y()] + l_block_counts[key_4.y()];
            out[address] = val_4.y();
            histogram[key_4.y()]++;

            address = histogram[key_4.z()] + l_scanned_seeds[key_4.z()] + l_block_counts[key_4.z()];
            out[address] = val_4.z();
            histogram[key_4.z()]++;

            address = histogram[key_4.w()] + l_scanned_seeds[key_4.w()] + l_block_counts[key_4.w()];
            out[address] = val_4.w();
            histogram[key_4.w()]++;
        }

        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        item.barrier(access::fence_space::local_space);
        // Now update the seed array.
        if (item.get_local_id(0) == item.get_local_range(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        item.barrier(access::fence_space::local_space);

        // Advance window
        window += item.get_local_range(0);
        i += item.get_local_range(0);
    }

