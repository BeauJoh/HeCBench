#===============================================================================
# User Options
#===============================================================================

# Compiler can be set below, or via environment variable
CC        = clang++
OPTIMIZE  = no
DEBUG     = yes
OUTPUT    = yes
CUDA_ARCH = "--cuda-gpu-arch=sm_60"
GCC_TOOLCHAIN = "/auto/software/gcc/x86_64/gcc-9.1.0/"

#===============================================================================
# Program name & source code list
#===============================================================================

program = main

source = main.cpp galois.cpp jerasure.cpp GCRSMatrix.cpp utils.cpp

obj = $(source:.cpp=.o)

#===============================================================================
# Sets Flags
#===============================================================================

# Standard Flags
CFLAGS := -DUSE_GPU -std=c++14 -Wall -I../include \
          -fsycl -fsycl-targets=nvptx64-nvidia-cuda-sycldevice \
          -fsycl-unnamed-lambda \
          -Xsycl-target-backend $(CUDA_ARCH) \
          --gcc-toolchain=$(GCC_TOOLCHAIN)

# Linker Flags
LDFLAGS = 

# Debug Flags
ifeq ($(DEBUG),yes)
  CFLAGS += -g
  LDFLAGS  += -g
endif

# Dump output
ifeq ($(OUTPUT),yes)
  CFLAGS += -DDUMP
endif


# Optimization Flags
ifeq ($(OPTIMIZE),yes)
  CFLAGS += -O3
endif

#===============================================================================
# Targets to Build
#===============================================================================

$(program): $(obj)
	$(CC) $(CFLAGS) $(obj) -o $@ $(LDFLAGS)

%.o: %.cpp
	$(CC) $(CFLAGS) -c $< -o $@

jerasure.o: jerasure.h galois.h
galois.o: galois.h
GCRSMatrix.o: GCRSMatrix.h jerasure.h galois.h
main.o: utils.h GCRSMatrix.h kernels.cpp
utils.o: utils.h

clean:
	rm -rf $(program) $(obj)

run: $(program)
	./$(program) 10 10

